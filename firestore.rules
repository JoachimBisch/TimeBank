rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isInvolved(fromId, toId) {
      return isAuthenticated() && (request.auth.uid == fromId || request.auth.uid == toId);
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isOwner(userId) ||
        // Allow balance updates during transactions
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['timeBalance', 'exchangedHours', 'exchangesCount', 'updatedAt'])
      );
    }
    
    // Transactions collection
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && (
        isInvolved(resource.data.fromUserId, resource.data.toUserId)
      );
      allow create: if isAuthenticated() && (
        isInvolved(request.resource.data.fromUserId, request.resource.data.toUserId)
      );
    }
    
    // Bookings collection
    match /bookings/{bookingId} {
      allow read: if isAuthenticated() && (
        isInvolved(resource.data.guestUserId, resource.data.hostUserId)
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isInvolved(resource.data.guestUserId, resource.data.hostUserId) &&
        // Only allow status updates
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'updatedAt'])
      );
    }
    // Experiences collection
    match /experiences/{experienceId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
  }
}